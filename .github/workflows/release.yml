# This workflow is manually triggered to create a new cross-platform release.
name: Manually Triggered Desktop Release

# This section defines the manual trigger for the workflow.
on:
  workflow_dispatch:
    inputs:
      version-bump:
        description: 'The type of version bump (major, minor, or patch)'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

jobs:
  # This job builds the application for Windows, macOS, and Ubuntu.
  build-tauri:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Clean Caches
        run: |
          # This step aggressively removes old cached data to prevent conflicts
          rm -rf ~/.npm
          rm -rf ~/.cargo
          rm -rf ./src-tauri/target
          rm -rf ./node_modules
          rm -f ./package-lock.json
          rm -f ./src-tauri/Cargo.lock

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Setup Rust
        run: rustup update stable

      - name: Install Dependencies in Correct Order
        run: |
          # First, update Rust dependencies based on the corrected Cargo.toml
          echo "--- Updating Rust dependencies ---"
          cd src-tauri && cargo update && cd ..
          
          # Second, install NPM packages. This respects the new Cargo.lock file.
          echo "--- Installing NPM dependencies ---"
          npm install

      - name: Install Linux Dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev build-essential curl wget file libssl-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Build Tauri App
        run: npm run tauri build
        env:
          # This helps diagnose build issues if they persist
          RUST_BACKTRACE: 1

      - name: Upload Tauri Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Tauri Build Artifacts (${{ matrix.os }})
          path: src-tauri/target/release/bundle

  # This job creates the GitHub Release after all builds are successful.
  create-release:
    runs-on: ubuntu-latest
    needs: build-tauri
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch all history for the changelog generator to work correctly
          fetch-depth: 0

      - name: Generate Changelog
        id: changelog
        uses: TriPSs/conventional-changelog-action@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare Release Assets
        run: |
          mkdir -p release-assets
          # Move all built files (.deb, .AppImage, .msi, .dmg) into one folder
          # The '|| true' prevents the workflow from failing if a specific file type doesn't exist
          find artifacts -type f \( -name "*.deb" -o -name "*.AppImage" -o -name "*.msi" -o -name "*.dmg" \) -exec cp {} release-assets/ \; || true
          
          # For macOS, we also zip the .app bundle for easier distribution
          if [ -d "artifacts/Tauri Build Artifacts (macos-latest)/app" ]; then
            cd artifacts/Tauri\ Build\ Artifacts\ \(macos-latest\)/app
            for app in *.app; do
              zip -r "../../../release-assets/${app%.app}.zip" "$app"
            done
            cd -
          fi
          
          echo "Prepared release assets:"
          ls -l release-assets/

      - name: Install GitHub CLI
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y

      - name: Determine New Version and Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Fetch the latest tag from the repository
          LATEST_TAG=$(git tag --sort=-v:refname | head -n 1)
          if [[ -z "$LATEST_TAG" ]]; then
            # If no tags exist, start from v0.0.0
            LATEST_TAG="v0.0.0"
          fi
          
          # Parse the latest tag to get major, minor, and patch numbers
          if [[ "$LATEST_TAG" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            MAJOR=${BASH_REMATCH[1]}
            MINOR=${BASH_REMATCH[2]}
            PATCH=${BASH_REMATCH[3]}
          else
            echo "Could not parse latest tag: $LATEST_TAG. Starting from v0.1.0."
            MAJOR=0; MINOR=1; PATCH=0
          fi

          # Increment the version based on the manual input
          BUMP_TYPE="${{ github.event.inputs.version-bump }}"
          if [ "$BUMP_TYPE" == "major" ]; then
            MAJOR=$((MAJOR + 1)); MINOR=0; PATCH=0
          elif [ "$BUMP_TYPE" == "minor" ]; then
            MINOR=$((MINOR + 1)); PATCH=0
          else # Default to patch
            PATCH=$((PATCH + 1))
          fi
          
          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "Creating new release: $NEW_VERSION"
          
          # Get the release notes generated by the changelog action
          CHANGELOG_NOTES="${{ steps.changelog.outputs.changelog }}"
          
          # Create the GitHub Release and upload all assets
          gh release create "$NEW_VERSION" \
            --title "CircuitVerse Desktop $NEW_VERSION" \
            --notes "$CHANGELOG_NOTES" \
            release-assets/*
      