name: Manually Triggered Desktop Release

permissions:
  contents: write
  actions: read

concurrency:
  group: desktop-release-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      version-bump:
        description: 'The type of version bump (major, minor, or patch)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  build-tauri:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          # Use setup-node's built-in caching for simplicity and correctness
          cache: 'npm'

      - name: Install Dependencies
        run: npm install

      - name: Run Cross-Platform Build Script
        run: node build-desktop.js

      - name: Setup Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      - name: Install Linux Dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libxdo-dev \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Install macOS Dependencies
        if: matrix.os == 'macos-latest'
        run: brew install pkg-config

      - name: Install Windows Dependencies
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          # Use 'upgrade' to be idempotent and the correct package name
          choco upgrade --no-progress -y wixtoolset nsis microsoft-edge-webview2-runtime.evergreen.standalone

      - name: Cache Rust Dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri"

      - name: Build Tauri App
        run: npm run tauri build

      - name: Upload Tauri Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Tauri-Build-Artifacts-${{ matrix.os }}
          path: src-tauri/target/release/bundle/

  create-release:
    runs-on: ubuntu-latest
    needs: build-tauri
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate Changelog
        id: changelog
        uses: TriPSs/conventional-changelog-action@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          # Merge artifacts from different OS into a single directory
          merge-multiple: true

      - name: Prepare Release Assets
        run: |
          mkdir -p release-assets
          
          # Move primary assets
          find artifacts -maxdepth 2 -type f \( -name "*.deb" -o -name "*.AppImage" -o -name "*.msi" -o -name "*.dmg" \) -exec mv {} release-assets/ \;

          # Find and zip the macOS .app bundle
          APP_BUNDLE=$(find artifacts -name "*.app" -type d -maxdepth 2 | head -n 1)
          if [[ -d "$APP_BUNDLE" ]]; then
            APP_NAME=$(basename "$APP_BUNDLE" .app)
            pushd "$(dirname "$APP_BUNDLE")"
            zip -r "../../release-assets/${APP_NAME}.zip" "$(basename "$APP_BUNDLE")"
            popd
          fi
          
          echo "Prepared release assets:"
          ls -l release-assets/

      - name: Determine New Version and Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Fetch the latest tag from the repository
          LATEST_TAG=$(git tag --sort=-v:refname | head -n 1)
          if [[ -z "$LATEST_TAG" ]]; then
            LATEST_TAG="v0.0.0" # Start from v0.0.0 if no tags exist
          fi
          
          # Parse the latest tag to get major, minor, and patch numbers
          if [[ "$LATEST_TAG" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
            MAJOR=${BASH_REMATCH[1]}
            MINOR=${BASH_REMATCH[2]}
            PATCH=${BASH_REMATCH[3]}
          else
            echo "Could not parse latest tag: $LATEST_TAG. Starting from v0.1.0."
            MAJOR=0; MINOR=1; PATCH=0
          fi

          # Increment the version based on the manual input
          BUMP_TYPE="${{ github.event.inputs.version-bump }}"
          if [ "$BUMP_TYPE" == "major" ]; then
            MAJOR=$((MAJOR + 1)); MINOR=0; PATCH=0
          elif [ "$BUMP_TYPE" == "minor" ]; then
            MINOR=$((MINOR + 1)); PATCH=0
          else # Default to patch
            PATCH=$((PATCH + 1))
          fi
          
          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "Creating new release: $NEW_VERSION"
          
          CHANGELOG_NOTES_FILE="RELEASE_NOTES.md"
          printf "%s\n" "${{ steps.changelog.outputs.changelog }}" > "$CHANGELOG_NOTES_FILE"
          
          # Use GitHub CLI to create the release
          gh release create "$NEW_VERSION" \
            --title "CircuitVerse Desktop $NEW_VERSION" \
            --notes-file "$CHANGELOG_NOTES_FILE" \
            release-assets/*