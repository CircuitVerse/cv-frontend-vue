# This workflow is triggered on a new release.
name: Desktop Release

on:
  release:
    types: [published]

# A job to get the semantic version and release notes in a dry-run.
jobs:
  get-release-info:
    runs-on: ubuntu-latest
    outputs:
      next_version: ${{ steps.dry-run.outputs.nextReleaseVersion }}
      release_notes: ${{ steps.dry-run.outputs.releaseNotes }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          # Fetch all history for semantic-release to analyze
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install Dependencies
        run: npm install

      # Run semantic-release in dry-run mode to get the version and notes
      - name: Dry-run semantic-release
        id: dry-run
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx semantic-release --dry-run
          
          # Extract and set outputs from the dry-run output
          VERSION=$(npx semantic-release --dry-run | grep 'The next release version is' | sed 's/.*is \([0-9.]*\).*/\1/')
          NOTES=$(npx semantic-release --dry-run | grep -P '(?<=^\[semantic-release] › ℹ  The release notes are:\n\n).*' -o -s -P | sed 's/\\n/\n/g')
          
          echo "::set-output name=nextReleaseVersion::$VERSION"
          echo "::set-output name=releaseNotes::$NOTES"

  # A job to build the Tauri application for multiple operating systems.
  build-tauri:
    runs-on: ${{ matrix.os }}
    needs: get-release-info
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Cache Node.js Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Install Dependencies
        run: npm install
        shell: bash
        
      - name: Install Tauri CLI and API
        run: |
          npm install -g @tauri-apps/cli
          npm install @tauri-apps/cli @tauri-apps/api @tauri-apps/plugin-fs --save-dev
        shell: bash

      - name: Run Cross-Platform Build Script
        run: node build-desktop.js
        shell: bash

      - name: Setup Rust
        if: matrix.os != 'windows-latest'
        run: |
          rustup update stable
          rustup default stable
        shell: bash

      - name: Install Linux Dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install libwebkit2gtk-4.1-dev \
          build-essential \
          curl \
          wget \
          file \
          libxdo-dev \
          libssl-dev \
          libayatana-appindicator3-dev \
          librsvg2-dev
        shell: bash

      - name: Import GPG Key
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "$LINUX_SIGNING_KEY" | gpg --batch --yes --import
        env:
          LINUX_SIGNING_KEY: ${{ secrets.LINUX_SIGNING_KEY }}

      - name: Install macOS Dependencies
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install pkg-config
        shell: bash

      - name: Cache Rust Dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri"

      - name: Build Tauri App
        if: matrix.os == 'ubuntu-latest'
        env:
          TAURI_SIGNING_KEY: ${{ secrets.LINUX_SIGNING_KEY_ID }}
          TAURI_SIGNING_PASSWORD: ${{ secrets.LINUX_SIGNING_KEY_PASSPHRASE }}
        run: |
           echo "Using TAURI_SIGNING_KEY: $TAURI_SIGNING_KEY"
           npm run tauri build -- --version ${{ needs.get-release-info.outputs.next_version }}
        shell: bash

      - name: Generate Detached GPG Signatures
        if: matrix.os == 'ubuntu-latest'
        run: |
          for deb_file in src-tauri/target/release/bundle/deb/*.deb; do
            echo "$LINUX_SIGNING_PASSPHRASE" | gpg --batch --yes --pinentry-mode loopback \
              --passphrase-fd 0 --armor --detach-sign --output "${deb_file}.asc" "$deb_file"
          done
          for appimage_file in src-tauri/target/release/bundle/appimage/*.AppImage; do
            echo "$LINUX_SIGNING_PASSPHRASE" | gpg --batch --yes --pinentry-mode loopback \
              --passphrase-fd 0 --armor --detach-sign --output "${appimage_file}.asc" "$appimage_file"
          done
        env:
          LINUX_SIGNING_PASSPHRASE: ${{ secrets.LINUX_SIGNING_KEY_PASSPHRASE }}

      - name: Build Tauri App (Non-Linux)
        if: matrix.os != 'ubuntu-latest'
        run: npm run tauri build -- --version ${{ needs.get-release-info.outputs.next_version }}
        shell: bash
  
      - name: Upload Tauri Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Tauri Build Artifacts (${{ matrix.os }})
          path: |
            src-tauri/target/release/bundle

  # A job to attach the artifacts to the GitHub release.
  attach-to-release:
    runs-on: ubuntu-latest
    needs: [get-release-info, build-tauri]
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare Release Assets
        run: |
            mkdir -p release-assets
            if [ -d "artifacts/Tauri Build Artifacts (ubuntu-latest)/deb" ]; then
              cp artifacts/Tauri\ Build\ Artifacts\ \(ubuntu-latest\)/deb/*.deb release-assets/ || true
              cp artifacts/Tauri\ Build\ Artifacts\ \(ubuntu-latest\)/deb/*.asc release-assets/ || true
            fi
            if [ -d "artifacts/Tauri Build Artifacts (ubuntu-latest)/appimage" ]; then
              cp artifacts/Tauri\ Build\ Artifacts\ \(ubuntu-latest\)/appimage/*.AppImage release-assets/ || true
              cp artifacts/Tauri\ Build\ Artifacts\ \(ubuntu-latest\)/appimage/*.asc release-assets/ || true
            fi
            if [ -d "artifacts/Tauri Build Artifacts (windows-latest)/msi" ]; then
              cp artifacts/Tauri\ Build\ Artifacts\ \(windows-latest\)/msi/*.msi release-assets/ || true
            fi
            if [ -d "artifacts/Tauri Build Artifacts (macos-latest)/dmg" ]; then
              cp artifacts/Tauri\ Build\ Artifacts\ \(macos-latest\)/dmg/*.dmg release-assets/ || true
            fi
            if [ -d "artifacts/Tauri Build Artifacts (macos-latest)/app" ]; then
              cd artifacts/Tauri\ Build\ Artifacts\ \(macos-latest\)/app
              for app in *.app; do
                zip -r "../../../release-assets/${app%.app}.zip" "$app"
              done
              cd - || exit
            fi
            echo "🔍 Release Assets:"
            ls -la release-assets/
        shell: bash
  
      # Upload the prepared assets to the GitHub release.
      - name: Update Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          files: release-assets/*
          tag_name: ${{ github.event.release.tag_name }}
          name: "v${{ needs.get-release-info.outputs.next_version }}"
          body: ${{ needs.get-release-info.outputs.release_notes }}