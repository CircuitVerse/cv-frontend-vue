name: Tauri Simulator Desktop Release

on:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  build-tauri:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Cache Node.js Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Install Dependencies
        run: npm install
        shell: bash

      - name: Install Tauri CLI and API
        run: |
          npm install -g @tauri-apps/cli
          npm install @tauri-apps/cli @tauri-apps/api @tauri-apps/plugin-fs --save-dev
        shell: bash

      - name: Run Cross-Platform Build Script
        run: node build-desktop.js
        shell: bash

      - name: Setup Rust
        if: matrix.os != 'windows-latest'
        run: |
          rustup update stable
          rustup default stable
        shell: bash

      - name: Install Linux Dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install libwebkit2gtk-4.1-dev \
          build-essential \
          curl \
          wget \
          file \
          libxdo-dev \
          libssl-dev \
          libayatana-appindicator3-dev \
          librsvg2-dev
        shell: bash

      - name: Install macOS Dependencies
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install pkg-config
        shell: bash

      - name: Cache Rust Dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri"

      - name: Build Tauri App
        run: npm run tauri build
        shell: bash

      - name: Install GitHub CLI
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh -y
          
      - name: Upload Tauri Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Tauri Build Artifacts (${{ matrix.os }})
          path: |
            src-tauri/target/release/bundle

            upload-assets:
              needs: [build-tauri]
              runs-on: ubuntu-latest
              steps:
                - name: Checkout repository
                  uses: actions/checkout@v4
          
                - name: Download Artifacts
                  uses: actions/download-artifact@v4
                  with:
                    path: artifacts
          
                - name: Prepare Release Assets
                  run: |
                    mkdir -p release-assets
                    
                    # For Ubuntu (Linux)
                    if [ -d "artifacts/Tauri Build Artifacts (ubuntu-latest)/deb" ]; then
                      cp artifacts/Tauri\ Build\ Artifacts\ \(ubuntu-latest\)/deb/*.deb release-assets/ || true
                    fi
                    if [ -d "artifacts/Tauri Build Artifacts (ubuntu-latest)/appimage" ]; then
                      cp artifacts/Tauri\ Build\ Artifacts\ \(ubuntu-latest\)/appimage/*.AppImage release-assets/ || true
                    fi
                    
                    # For Windows
                    if [ -d "artifacts/Tauri Build Artifacts (windows-latest)/msi" ]; then
                      cp artifacts/Tauri\ Build\ Artifacts\ \(windows-latest\)/msi/*.msi release-assets/ || true
                    fi
                    
                    # For macOS
                    if [ -d "artifacts/Tauri Build Artifacts (macos-latest)/dmg" ]; then
                      cp artifacts/Tauri\ Build\ Artifacts\ \(macos-latest\)/dmg/*.dmg release-assets/ || true
                    fi
                    if [ -d "artifacts/Tauri Build Artifacts (macos-latest)/app" ]; then
                      cd artifacts/Tauri\ Build\ Artifacts\ \(macos-latest\)/app
                      for app in *.app; do
                        zip -r "../../../release-assets/${app%.app}.zip" "$app"
                      done
                      cd - || exit
                    fi
                    
                    ls -la release-assets/
          
                - name: Upload Assets to Release
                  run: |
                    for asset in release-assets/*; do
                      echo "Uploading $asset"
                      filename=$(basename "$asset")
                      if [[ "$filename" == *.deb ]]; then
                        asset_name="${GITHUB_REF_NAME}-linux.deb"
                      elif [[ "$filename" == *.AppImage ]]; then
                        asset_name="${GITHUB_REF_NAME}-linux.AppImage"
                      elif [[ "$filename" == *.msi ]]; then
                        asset_name="${GITHUB_REF_NAME}-windows.msi"
                      elif [[ "$filename" == *.dmg ]]; then
                        asset_name="${GITHUB_REF_NAME}-macos.dmg"
                      elif [[ "$filename" == *.zip ]]; then
                        asset_name="${GITHUB_REF_NAME}-macos.app.zip"
                      else
                        asset_name="${GITHUB_REF_NAME}-${filename}"
                      fi
                      
                      gh release upload "${GITHUB_REF_NAME}" "$asset" --clobber --name "$asset_name"
                    done
                  env:
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  shell: bash