name: Vue Simulator Desktop Release

on:
  push:
    branches: [ "main" ]
  release:
    types: [created]

jobs:
  build-tauri:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Cache Node.js Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Install Dependencies
        run: npm install
        shell: bash

      - name: Run Cross-Platform Build Script
        run: node tauri-build.js
        shell: bash

      - name: Setup Rust
        if: matrix.os != 'windows-latest'
        run: |
          rustup update stable
          rustup default stable
        shell: bash

      - name: Install Linux Dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install libwebkit2gtk-4.1-dev \
          build-essential \
          curl \
          wget \
          file \
          libxdo-dev \
          libssl-dev \
          libayatana-appindicator3-dev \
          librsvg2-dev
        shell: bash

      - name: Install macOS Dependencies
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install pkg-config
        shell: bash

      - name: Cache Rust Dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri"

      - name: Build Tauri App
        run: npm run tauri build
        shell: bash

      - name: Upload Tauri Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Tauri Build Artifacts (${{ matrix.os }})
          path: |
            src-tauri/target/release/bundle

  create-release:
    runs-on: ubuntu-latest
    needs: build-tauri
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare Release Assets
        run: |
          mkdir -p release-assets
          
          # For Ubuntu (Linux)
          if [ -d "artifacts/Tauri Build Artifacts (ubuntu-latest)/deb" ]; then
            cp artifacts/Tauri\ Build\ Artifacts\ \(ubuntu-latest\)/deb/*.deb release-assets/ || true
          fi
          if [ -d "artifacts/Tauri Build Artifacts (ubuntu-latest)/appimage" ]; then
            cp artifacts/Tauri\ Build\ Artifacts\ \(ubuntu-latest\)/appimage/*.AppImage release-assets/ || true
          fi
          
          # For Windows
          if [ -d "artifacts/Tauri Build Artifacts (windows-latest)/msi" ]; then
            cp artifacts/Tauri\ Build\ Artifacts\ \(windows-latest\)/msi/*.msi release-assets/ || true
          fi
          
          # For macOS
          if [ -d "artifacts/Tauri Build Artifacts (macos-latest)/dmg" ]; then
            cp artifacts/Tauri\ Build\ Artifacts\ \(macos-latest\)/dmg/*.dmg release-assets/ || true
          fi
          if [ -d "artifacts/Tauri Build Artifacts (macos-latest)/app" ]; then
            # For macOS app bundles, we need to zip them
            cd artifacts/Tauri\ Build\ Artifacts\ \(macos-latest\)/app
            for app in *.app; do
              zip -r "../../../release-assets/${app%.app}.zip" "$app"
            done
            cd -
          fi
          
          # List what we've collected
          ls -la release-assets/
        shell: bash

      - name: Install GitHub CLI
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh -y
        shell: bash

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get version from package.json or use "latest" if not found
          VERSION=$(grep -oP '"version": "\K[^"]+' package.json 2>/dev/null || echo "latest")
          
          # Create release
          gh release create "v$VERSION" \
            --title "CircuitVerse Desktop v$VERSION" \
            --notes "Official CircuitVerse desktop app release. Download the binaries below for your platform." \
            release-assets/*
        shell: bash