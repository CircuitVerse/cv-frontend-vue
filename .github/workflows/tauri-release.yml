name: CircuitVerse Simulator Desktop Release

on:
  push:
    branches: [ "main" ]
  release:
    types: [created]

jobs:
  build-tauri:
    name: Build and Sign Tauri App
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
# node 22 is been used in circuitverse primary code base.
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Cache Node.js Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Install npm Dependencies
        run: npm install
        shell: bash

      - name: Get Version from Git Tags
        id: get_version
        run: |
          VERSION=$(git describe --tags --abbrev=0)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Version is $VERSION"
        shell: bash

      - name: Update Tauri Config with Version
        run: |
          jq '.package.version = env.VERSION' src-tauri/tauri.conf.json > src-tauri/tauri.conf.json.tmp && \
          mv src-tauri/tauri.conf.json.tmp src-tauri/tauri.conf.json
        shell: bash

      - name: Install Tauri CLI and API
        run: |
          npm install -g @tauri-apps/cli
          npm install @tauri-apps/cli @tauri-apps/api @tauri-apps/plugin-fs --save-dev
        shell: bash

      - name: Run Pre-Build Script
        run: node build-desktop.js
        shell: bash

      - name: Setup Rust (Non-Windows)
        if: matrix.os != 'windows-latest'
        run: |
          rustup update stable
          rustup default stable
        shell: bash

      - name: Install OS-Specific Dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install -y libwebkit2gtk-4.1-dev build-essential curl wget file libxdo-dev libssl-dev libayatana-appindicator3-dev librsvg2-dev
        shell: bash

      - name: Install OS-Specific Dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install pkg-config
        shell: bash

      - name: Cache Rust Dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri"

      - name: Build Tauri App
        run: npm run tauri build
        shell: bash

      - name: List Build Artifacts
        run: ls -la src-tauri/target/release/bundle
        shell: bash

      # Code Signing Steps for each platform
      - name: Code Signing (Windows)
        if: matrix.os == 'windows-latest'
        env:
          WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
          WINDOWS_CERT_PASSWORD: ${{ secrets.WINDOWS_CERT_PASSWORD }}
        run: |
          echo "$WINDOWS_CERTIFICATE" | base64 --decode > cert.pfx
          echo "Signing Windows binaries..."
          signtool sign /f cert.pfx /p "$WINDOWS_CERT_PASSWORD" /tr http://timestamp.digicert.com /td SHA256 src-tauri/target/release/bundle/windows/*
        shell: bash

      - name: Code Signing (macOS)
        if: matrix.os == 'macos-latest'
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERT_PASSWORD: ${{ secrets.MACOS_CERT_PASSWORD }}
        run: |
          echo "$MACOS_CERTIFICATE" | base64 --decode > cert.p12
          echo "Importing macOS certificate..."
          security import cert.p12 -P "$MACOS_CERT_PASSWORD" -A
          echo "Signing macOS binaries..."
          codesign --deep --force --verbose --sign "Developer ID Application" src-tauri/target/release/bundle/macos/*
        shell: bash

      - name: Code Signing (Linux with GPG)
        if: matrix.os == 'ubuntu-latest'
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import
          for file in src-tauri/target/release/bundle/appimage/*.AppImage; do
            echo "Signing $file..."
            gpg --batch --yes --detach-sign --armor --passphrase "$GPG_PASSPHRASE" --pinentry-mode loopback "$file"
          done
        shell: bash

      - name: Create Checksums for Artifacts
        run: |
          for file in $(find src-tauri/target/release/bundle -type f -executable); do
            sha256sum "$file" >> src-tauri/target/release/bundle/checksums.txt
          done
        shell: bash

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Tauri Build Artifacts (${{ matrix.os }})
          path: src-tauri/target/release/bundle

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-tauri
    if: github.event_name == 'release' && github.event.action == 'created'
    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Install GitHub CLI
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh -y
        shell: bash

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "v${{ env.VERSION }}" \
            --title "Release v${{ env.VERSION }}" \
            --notes "Official Vue Simulator Desktop Release v${{ env.VERSION }}. Download the binaries, signatures, and checksums below." \
            artifacts/Tauri\ Build\ Artifacts\ \(ubuntu-latest\)/* \
            artifacts/Tauri\ Build\ Artifacts\ \(windows-latest\)/* \
            artifacts/Tauri\ Build\ Artifacts\ \(macos-latest\)/*
        shell: bash